{
  "info": {
    "_postman_id": "03754108-5cf3-42a9-8f9c-f3b97d71ffbf",
    "name": "Milan Postman/Rocketmiles API Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Fetch Postman BDD",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "cb3f6850-f0cf-48bf-9818-bc5f249a6bcc",
            "exec": [
              "postman.setGlobalVariable('postmanBDD', responseBody);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "9f0edbda-e4af-4d7f-b1b2-d4266eb95367",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "url": "http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js",
        "description": "This is a GET request to download Postman BDD (Behavior Driven Development) for writing tests in BDD syntax"
      },
      "response": []
    },
    {
      "name": "Basic GET Request Tests",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "6b6a73ba-e23a-41b8-b590-4684a8ef2a2b",
            "exec": [
              "//Test 1 - Successful request",
              "pm.test(\"Status code is 200\", function () { ",
              "    pm.response.to.have.status(200); ",
              "});",
              "",
              "//Test 2 - Quick Response",
              "tests[\"Response time is less than 500ms\"] = responseTime < 500;",
              "",
              "/** Test 3",
              "Step 1 - Verify contentTypeHeader exists",
              "Step 2 - If step 1 passed verify content is of type json **/",
              "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
              " ",
              "tests[\"contentTypeHeader exists\"] = contentTypeHeaderExists;",
              " ",
              "if (contentTypeHeaderExists) {",
              "    tests[\"Content is of type json\"] = ",
              "      responseHeaders[\"Content-Type\"].has(\"application/json\");",
              "}",
              "",
              "//Test 4 - Response contains a body",
              "pm.test(\"Response must have a body\", function () {",
              "     pm.response.to.be.withBody;",
              "});",
              "",
              "//Test 5 - Check how many cards our deck has  ",
              "pm.test(\"Deck should contain 52 cards\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.remaining).to.eql(52);",
              "});",
              "",
              "//Test 6 - Deck must be suffled  ",
              "pm.test(\"Deck should be shuffled\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.shuffled).to.eql(true);",
              "});",
              "",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "e1b37991-a494-4a76-bc5d-fbb838112a2c",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1",
          "protocol": "https",
          "host": [
            "deckofcardsapi",
            "com"
          ],
          "path": [
            "api",
            "deck",
            "new",
            "shuffle",
            ""
          ],
          "query": [
            {
              "key": "deck_count",
              "value": "1"
            }
          ]
        },
        "description": "Basic tests written for a public GET request from  http://deckofcardsapi.com/"
      },
      "response": []
    },
    {
      "name": "Basic POST Request Tests",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "e9621452-4eb2-4797-9820-61c5536e8040",
            "exec": [
              "//Test 1 - Bad request",
              "pm.test(\"Status code is 400\", function () { ",
              "    pm.response.to.have.status(400); ",
              "});",
              "",
              "//Test 2 - Quick Response",
              "tests[\"Response time is less than 500ms\"] = responseTime < 500;",
              "",
              "/** Test 3",
              "Step 1 - Verify contentTypeHeader exists",
              "Step 2 - If step 1 passed verify content is of type json **/",
              "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
              " ",
              "tests[\"contentTypeHeader exists\"] = contentTypeHeaderExists;",
              " ",
              "if (contentTypeHeaderExists) {",
              "    tests[\"Content is of type json\"] = ",
              "      responseHeaders[\"Content-Type\"].has(\"application/json\");",
              "}",
              "",
              "//Test 4 - Response contains a body",
              "pm.test(\"Response must have a body\", function () {",
              "     pm.response.to.be.withBody;",
              "});",
              "",
              "//Test 5 - Missing email or username ",
              "pm.test(\"Post Request didn't contain email or username\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.eql(\"Missing email or username\");",
              "});",
              "",
              "",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "54e71068-dd82-40eb-b7ad-a57448bc0a36",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "https://reqres.in/api/register?password=fake",
          "protocol": "https",
          "host": [
            "reqres",
            "in"
          ],
          "path": [
            "api",
            "register"
          ],
          "query": [
            {
              "key": "password",
              "value": "fake"
            }
          ]
        },
        "description": "This is a public Post Request API from https://reqres.in"
      },
      "response": []
    }
  ]
}